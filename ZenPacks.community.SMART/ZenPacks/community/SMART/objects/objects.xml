<?xml version="1.0"?>
<objects>
<!-- ('', 'zport', 'dmd', 'Devices', 'Server', 'Linux', 'rrdTemplates', 'HardDisk') -->
<object id='/zport/dmd/Devices/Server/Linux/rrdTemplates/HardDisk' module='Products.ZenModel.RRDTemplate' class='RRDTemplate'>
<property type="string" id="targetPythonClass" mode="w" >
ZenPacks.community.SMART.HardDisk
</property>
<tomanycont id='datasources'>
<object id='health' module='Products.ZenModel.BasicDataSource' class='BasicDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SNMP
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="string" id="eventClass" mode="w" >
/Cmd/Fail
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="oid" mode="w" >
1.3.6.1.4.1.8072.1.3.2.4.1.2.11.115.109.97.114.116.72.101.97.108.116.104
</property>
<property type="boolean" id="usessh" mode="w" >
False
</property>
<property type="string" id="parser" mode="w" >
Auto
</property>
<tomanycont id='datapoints'>
<object id='health' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
</tomanycont>
<tomanycont id='thresholds'>
<object id='health' module='Products.ZenModel.MinMaxThreshold' class='MinMaxThreshold'>
<property label="DataPoints" type="lines" id="dsnames" mode="w" >
['health_health']
</property>
<property label="Enabled" type="boolean" id="enabled" mode="w" >
True
</property>
<property type="string" id="maxval" mode="w" >
40
</property>
<property type="string" id="eventClass" mode="w" >
/Perf/SMART
</property>
<property type="int" id="severity" mode="w" >
2
</property>
<property type="int" id="escalateCount" mode="w" >
3
</property>
</object>
</tomanycont>
<tomanycont id='graphDefs'>
<object id='IO_Bytes' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
False
</property>
<property type="int" id="miny" mode="w" >
-1
</property>
<property type="int" id="maxy" mode="w" >
-1
</property>
<property type="boolean" id="hasSummary" mode="w" >
True
</property>
<property type="long" id="sequence" mode="w" >
1
</property>
<tomanycont id='graphPoints'>
<object id='diskIONRead' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
${graphPoint/id}
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
diskIONRead_diskIONRead
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
<object id='diskIONWrite' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property type="long" id="sequence" mode="w" >
1
</property>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
${graphPoint/id}
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
diskIONWrite_diskIONWrite
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
<object id='IO_Counts' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
False
</property>
<property type="int" id="miny" mode="w" >
-1
</property>
<property type="int" id="maxy" mode="w" >
-1
</property>
<property type="boolean" id="hasSummary" mode="w" >
True
</property>
<property type="long" id="sequence" mode="w" >
2
</property>
<tomanycont id='graphPoints'>
<object id='diskIOReads' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
${graphPoint/id}
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
diskIOReads_diskIOReads
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
<object id='diskIOWrites' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property type="long" id="sequence" mode="w" >
1
</property>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
${graphPoint/id}
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
diskIOWrites_diskIOWrites
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
<object id='health' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
False
</property>
<property type="int" id="miny" mode="w" >
0
</property>
<property type="int" id="maxy" mode="w" >
100
</property>
<property type="boolean" id="hasSummary" mode="w" >
False
</property>
<tomanycont id='graphPoints'>
<object id='health' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
${graphPoint/id}
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
health_health
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
</tomanycont>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Perf', 'SMART') -->
<object id='/zport/dmd/Events/Perf/SMART' module='Products.ZenEvents.EventClass' class='EventClass'>
<property type="text" id="transform" mode="w" >
import re
from transaction import commit
m = re.match("^.*current value ([0-9\.]*)$", evt.message, re.I)
value = int(float(m.group(1)))
comp = None
for f in device.hw.smartes():
    if f.name() != evt.component and f.id != evt.component: continue
    comp = f
    break

comp.status = value
evt.severity = comp.statusSeverity(comp.status)
commit()
</property>
<property type="text" id="transform" mode="w" >
import re
from transaction import commit
m = re.match("^.*current value ([0-9\.]*)$", evt.message, re.I)
value = int(float(m.group(1)))
comp = None
for f in device.hw.smartes():
    if f.name() != evt.component and f.id != evt.component: continue
    comp = f
    break

comp.status = value
evt.severity = comp.statusSeverity(comp.status)
commit()
</property>
</object>
</objects>
